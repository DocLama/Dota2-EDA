# -*- coding: utf-8 -*-
"""Analyse Dota2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oCUVLG3Jv_Ywp8D-zOzi1NcBpHcAYxmC
"""

pip install chart-studio

"""# **Dota2 EDA Analysis**

# **Importing the required libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
from plotly.offline import init_notebook_mode,iplot
init_notebook_mode(connected=False)
from datetime import datetime
import warnings
# Ignore warnings
warnings.filterwarnings('ignore')

"""# **Loading the dataset into dataframe**"""

matches_df=pd.read_csv('/kaggle/input/dota-2-matches/match.csv')
matches_df

matches_df.shape

"""# **Data Preprocessing**"""

matches_df.columns

matches_df.isnull().sum()

matches_df.info()

"""The code transforms the 'duration' and 'first_blood_time' columns by converting the values from seconds to minutes."""

matches_df[['duration','first_blood_time']]=matches_df[['duration','first_blood_time']].apply(lambda x:round(x/60,2))
matches_df

matches_df.drop(['start_time','tower_status_radiant','tower_status_dire','game_mode','barracks_status_dire'],axis=1,inplace=True)

matches_df

matches_df['radiant_win']=matches_df['radiant_win'].apply(lambda x:1 if x==True else 0)

players_df=pd.read_csv('/kaggle/input/dota-2-matches/players.csv')
players_df

players_df.info()

players_df=players_df.drop(["item_0", "item_1", "item_2", "item_3","item_4", "item_5", "level", "leaver_status", "xp_hero", "xp_creep","xp_roshan", "xp_other", "gold_other", "gold_death", "gold_buyback",       "gold_abandon", "gold_sell", "gold_destroying_structure",       "gold_killing_heros", "gold_killing_creeps", "gold_killing_roshan",
       "gold_killing_couriers", "unit_order_none","unit_order_move_to_position", "unit_order_move_to_target","unit_order_attack_move", "unit_order_attack_target",
       "unit_order_cast_position", "unit_order_cast_target","unit_order_cast_target_tree", "unit_order_cast_no_target",
       "unit_order_cast_toggle", "unit_order_hold_position","unit_order_train_ability","unit_order_drop_item","unit_order_give_item", "unit_order_pickup_item",
       "unit_order_pickup_rune", "unit_order_purchase_item","unit_order_sell_item", "unit_order_disassemble_item","unit_order_move_item", "unit_order_cast_toggle_auto",
       "unit_order_stop", "unit_order_taunt", "unit_order_buyback","unit_order_glyph","unit_order_eject_item_from_stash",
       "unit_order_cast_rune", "unit_order_ping_ability","unit_order_move_to_direction", "unit_order_patrol",
       "unit_order_vector_target_position", "unit_order_radar","unit_order_set_item_combine_lock", "unit_order_continue",'player_slot'],axis=1)

players_df

dota=players_df.merge(matches_df,on='match_id')
dota

hero_names_df=pd.read_csv("../input/dota-2-matches/hero_names.csv")
hero_names_df

hero_names_df.drop(['name'],axis=1,inplace=True)

dota=hero_names_df.merge(dota,on='hero_id')
dota

region_df=pd.read_csv('/kaggle/input/dota-2-matches/cluster_regions.csv')
region_df.head()

dota=region_df.merge(dota,on='cluster')
dota.head()

dota.columns

df=dota.copy()

df.drop(['cluster','hero_id','barracks_status_radiant'],axis=1,inplace=True)

df.rename(columns={'localized_name':'hero_name'},inplace=True)

df.set_index('match_id').sort_index()

df.columns

df['region'].unique()

df['hero_name'].nunique()

df['radiant_win'].nunique()

"""# **1. Which heroes tend to accumulate the most gold throughout a game?**

"""

# group the data by hero name and calculate the average gold per minute for each hero
hero_avg_gpm = df.groupby('hero_name')['gold_per_min'].mean()

# sort the heroes by their average gold per minute in descending order
top_gold_heroes = hero_avg_gpm.sort_values(ascending=False)

# print the top 10 heroes with the highest average gold per minute
top_gold_heroes.head(10)

# group the data by hero name and calculate the average gold per minute for each hero
hero_avg_gpm = df.groupby('hero_name')['gold_per_min'].mean()

# sort the heroes by their average gold per minute in descending order
top_gold_heroes = hero_avg_gpm.sort_values(ascending=False)

# create a bar chart using Plotly's go module
fig = go.Figure(
    go.Bar(
        x=top_gold_heroes.head(10).index,
        y=top_gold_heroes.head(10),
        orientation='v',
        marker_color='gold',opacity=0.6
    )
)

# set the axis labels and chart title
fig.update_layout(
    xaxis_title='Hero Name',
    yaxis_title='Average GPM',
    title='Top 10 Heroes by Average Gold per Minute'
)

# show the chart
fig.show()

"""# **2. Which heroes tend to accumulate the most exp throughout a game?**"""

# group the data by hero name and calculate the average experience per minute for each hero
hero_avg_xpm = df.groupby('hero_name')['xp_per_min'].mean()

# sort the heroes by their average experience per minute in descending order
top_xp_heroes = hero_avg_xpm.sort_values(ascending=False)

# print the top 10 heroes by average experience per minute
print(top_xp_heroes.head(10))

# group the data by hero name and calculate the average exp per minute for each hero
hero_avg_xpm = df.groupby('hero_name')['xp_per_min'].mean()

# sort the heroes by their average exp per minute in descending order
top_xp_heroes = hero_avg_xpm.sort_values(ascending=False)

# create a bar chart using Plotly's go module
fig = go.Figure(
    go.Bar(
        x=top_xp_heroes.head(10).index,
        y=top_xp_heroes.head(10),
        orientation='v',
        marker_color='grey',opacity=0.6
    )
)

# set the axis labels and chart title
fig.update_layout(
    xaxis_title='Hero Name',
    yaxis_title='Average XPM',
    title='Top 10 Heroes by Average EXP per Minute'
)

# show the chart
fig.show()

"""# **3. What is the distribution of gold per minute across all regions of players?**"""

# create a histogram of gold per minute using Plotly Express
fig = px.histogram(df, x='gold_per_min', nbins=50, title='Distribution of Gold per Minute')

# show the chart
fig.show()

"""# **4. Which heroes tend to get the most kills during a game?**"""

# group the data by hero name and calculate the average kills and assists per game for each hero
hero_avg_kills = df.groupby('hero_name')['kills'].mean()


# sort the heroes by their average kills and assists per game in descending order
top_kill_heroes = hero_avg_kills.sort_values(ascending=False)


# print the top 10 heroes by average kills per game
print("Top 10 heroes by average kills per game:")
print(top_kill_heroes.head(10))

# group the data by hero name and calculate the average kills per game for each hero
hero_avg_kills = df.groupby('hero_name')['kills'].mean()

# sort the heroes by their average kills per game in descending order
top_kill_heroes = hero_avg_kills.sort_values(ascending=False).head(10)

# create a bar chart of the top 10 heroes by average kills per game using Plotly go
fig = go.Figure(data=go.Bar(x=top_kill_heroes.index, y=top_kill_heroes.values))

# set the chart title and axis labels
fig.update_layout(title='Top 10 Heroes by Average Kills per Game',
                  xaxis_title='Hero Name',
                  yaxis_title='Average Kills per Game')

# show the chart
fig.show()

"""# **5. Which heroes tend to get the most assists during a game?**"""

# group the data by hero name and calculate the average assists per game for each hero
hero_avg_assists = df.groupby('hero_name')['assists'].mean()
# sort the heroes by their average assists per game in descending order
top_assist_heroes = hero_avg_assists.sort_values(ascending=False)


# print the top 10 heroes by average assists per game
print("Top 10 heroes by average assists per game:")
print(top_assist_heroes.head(10))

# group the data by hero name and calculate the average assists per game for each hero
hero_avg_asst = df.groupby('hero_name')['assists'].mean()

# sort the heroes by their average assists per game in descending order
top_asst_heroes = hero_avg_asst.sort_values(ascending=False).head(10)

# create a bar chart of the top 10 heroes by average assists per game using Plotly go
fig = go.Figure(data=go.Bar(x=top_asst_heroes.index, y=top_asst_heroes.values))

# set the chart title and axis labels
fig.update_layout(title='Top 10 Heroes by Average Assists per Game',
                  xaxis_title='Hero Name',
                  yaxis_title='Average Assists per Game')

# show the chart
fig.show()

"""# **6.What is the average duration of a match across all region?**"""

# Select only the game duration column
game_duration = df['duration']

# Create a histogram of game durations using plotly
fig = px.histogram(game_duration, nbins=50, labels={'value': 'Game duration (minutes)', 'count': 'Frequency'})
fig.show()

"""# **7. How often does the team on the radiant side win compared to the dire side?**"""

# Calculate the number of matches won by each team
radiant_wins = df[df['radiant_win'] == True]['radiant_win'].count()
dire_wins = df[df['radiant_win'] == False]['radiant_win'].count()

# Calculate the win rate for each team
total_matches = radiant_wins + dire_wins
radiant_win_rate = radiant_wins / total_matches
dire_win_rate = dire_wins / total_matches

# Print the win rate for each team
print(f"Radiant win rate: {radiant_win_rate:.2%}")
print(f"Dire win rate: {dire_win_rate:.2%}")

# Create a DataFrame with the win rates
win_rates_df = pd.DataFrame({
    'team': ['Radiant', 'Dire'],
    'win rate': [radiant_win_rate, dire_win_rate]
})

# Create a  bar chart
fig = px.bar(win_rates_df, x='team', y='win rate', text=win_rates_df['win rate'].apply(lambda x: f"{x:.2%}"),
             color='team')

# Define layout
fig.update_layout(title='Win rates for each team',
                  yaxis=dict(title='Win rate'),
                  xaxis=dict(title='Team'),
                  autosize=False
                  )

# Show the plot
fig.show()

"""# **8. How many matches are played on an average across all regions?**"""

# Group the data by region and count the number of games played in each region
region_games = df.groupby('region')['match_id'].count().sort_values(ascending=False)

# Print the region with the most number of games played
print(region_games.index[0], 'has played the most number of games:', region_games.iloc[0])
region_games

# Create a  bar chart
data = [
    go.Bar(
        x=region_games.index[:5],
        y=region_games.values[:5],

    )
]

# Define layout
layout = go.Layout(
    title='Region where the most number of games played',
    yaxis=dict(title='Count'),
    xaxis=dict(title='Region'),
    autosize=False

)

# Create a Figure object
fig = go.Figure(data=data, layout=layout)

# Show the plot
fig.show()

"""# **9.Which hard carry hero in Dota 2 has the highest probability of winning a match that lasts longer than 50 minutes?**"""

#list of hard_carries in dota2
hard_carries = ['Anti-Mage', 'Drow Ranger', 'Faceless Void', 'Juggernaut', 'Lone Druid', 'Medusa', 'Phantom Assassin', 'Phantom Lancer', 'Riki', 'Slark', 'Spectre', 'Terroblade', 'Weaver']
#the below code filters the hard_carries who played more than 50 min
d = df[(df['duration'] > 50) & (df['hero_name'].isin(hard_carries))]
d

# Calculate total number of wins for each hero
wins = d[d['radiant_win'] == 1].groupby('hero_name').count()['radiant_win']

# Calculate total number of matches played by each hero
matches_played = d.groupby('hero_name').count()['match_id']
mtches=matches_played.sort_values(ascending=False)

# Calculate win percentage
win_percentage = round((wins / matches_played) * 100,2)
wins_percent=win_percentage.sort_values(ascending=False)

# Calculate total number of wins for each hero
wins = d[d['radiant_win'] == 1].groupby('hero_name').count()['radiant_win']

# Calculate total number of matches played by each hero
matches_played = d.groupby('hero_name').count()['match_id']


# Calculate win percentage
win_percentage = round((wins / matches_played) * 100,2)

# Create bar chart for matches played
trace1 = go.Bar(x=mtches.index, y=mtches.values, name='Matches Played')

# Create bar chart for wins
trace2 = go.Bar(x=wins.index, y=wins.values, name='Wins')

# Create bar chart for win percentage
trace3 = go.Bar(x=wins_percent.index, y=wins_percent.values, name='Win Percentage')

# Create layout
layout = go.Layout(title='Performance of Hard Carries in Dota2 Matches (Duration > 50 minutes)',
                   xaxis=dict(title='Hero Name'),
                   yaxis=dict(title='Matches/Matches Won'),
                   updatemenus=[dict(type='dropdown',
                                     active=1,
                                     buttons=[dict(label='Matches Played',
                                                   method='update',
                                                   args=[{'visible': [True, False, False]},
                                                         {'title': 'Number of Matches Played'}]),
                                              dict(label='Wins',
                                                   method='update',
                                                   args=[{'visible': [True, True, False]},
                                                         {'title': 'Number of Wins'}]),
                                              dict(label='Win Percentage',
                                                   method='update',
                                                   args=[{'visible': [False, False, True]},
                                                         {'title': 'Win Percentage'}])])])

# Create figure
fig = go.Figure(data=[trace1, trace2, trace3], layout=layout)

# Show the figure
fig.show()